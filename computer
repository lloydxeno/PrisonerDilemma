library(ggplot2)
library(reshape2)
#this makes the results reproducible
set.seed(5)

#Set initial population shares
psy_share <- 0.05
np_share <- 1 - psy_share

mat <- matrix(c(psy_share, np_share), nrow=1)
pop_mix <- data.frame(mat)
colnames(pop_mix) <- c("psy_share", "np_share")

#initialize previous moves to NULL
prev_moves <-c(NA,NA)

###define the necessary functions

###The following function handles defection/cooperation
### probabilities based on the other player's previous move
### possibly NA in the first round.

game <-function(psy_prev=NA, np_prev=NA){
  
  #generate a random number that becomes
  #the basis for probability of cooperation or defection
  temp <- runif(n=1, min=0, max=1)  
  
  if(is.na(psy_prev) & is.na(np_prev)){
    
    if(temp <= .42){
      psy_move <- 1
      np_move <- 1
    }else if (temp > .42 & temp <=.45) {
      psy_move <- 0
      np_move <- 1
    }else {
      #this means temp > .45
      psy_move <- 0
      np_move <-0
    }
    #call encounter function   
    encounter(psy_move, np_move)  
    
  }
  else{
    #these are subsequent encounters
    #take into account previous moves
    
    #first test what the psychopath did
    #to determine what np does
    if(psy_prev==1){  
      if(temp <= .68){
        np_move <- 1
      }else{np_move <- 0}
    }
    else{
      #psychopath previously cooperated
      if(temp<=0.45){
        np_move <- 1
      }else{np_move <- 0}
    }
    #Now test what the non-psychopath did
    #to determine what psychopath does
    if(np_prev==1){
      if(temp<=0.78){
        psy_move <- 1
      }else{psy_move <- 0}
    }
    else{
      #non-psychopath previously cooperated
      if(temp<=0.68){
        psy_move <- 1
      }else{psy_move <- 0}
    }
    #Here: adjust population share
    encounter(psy_move, np_move)  
    
  }
}

############This function handles payoff calculation for a single round

encounter<-function(psy_move, np_move){
  #the following lines handle the cases
  #when the psychopathic player chooses to cooperate (0)
  if(psy_move==0){
    if(np_move==1){
      psy_win <- 0
      np_win <- 5
    }else{
      psy_win <-2.5
      np_win <-2.5
    }
  }
  #the following lines handle the cases
  #when the psychopathic player chooses to to defect (1)   
  else{
    if(np_move==1){
      psy_win <- 0
      np_win <- 0
    }else{
      psy_win <-5
      np_win <-0
    }
  }
  
  prev_moves[1] <<-psy_move
  prev_moves[2] <<-np_move
  
  
  #adjust the population share based on wins
  print(paste0("The psychopathic player won: ", psy_win, " ", "The non-psychopathic player won:", " ", np_win))
  ave_payoff <- mean(c(psy_win,np_win))
  print(paste0("The mean payoff was: ",ave_payoff))
  #adjust the global variable
  psy_share <<- psy_share*(1 + (psy_win-ave_payoff)/100)
  np_share <<- 1-psy_share
  
  print(paste0("New P share:", " ", psy_share, ".", "New NP share: ", np_share, "."))
  outvec <- c(psy_share, np_share)
  return(outvec)
  
}

####################Now run the simulation##############

i = 1
###Repeat the interaction until one
###Player goes extinct

while(psy_share>.01 & np_share>.01){
  new_mix <- game(prev_moves[1], prev_moves[2])
  print(paste0("Round #:", i))
  i=i+1
  pop_mix <- rbind(pop_mix,new_mix)
  
}
#Now plot the results
iter <- 1:nrow(pop_mix)

pop_mix <- cbind(iter, pop_mix)
colnames(pop_mix) <- c("Generation", "Psychopathic", "Non-psychopathic")

#reshape to long format
pop_mix_long <- melt(pop_mix,id.vars = "Generation")
names(pop_mix_long) <- c("Generation", "Player", "Share")


#now plot the graph

ggplot(pop_mix_long,                           
       aes(x = Generation,
           y = Share,
           col = Player)) +
  geom_line()
  
